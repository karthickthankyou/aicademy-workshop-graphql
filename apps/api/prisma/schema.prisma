// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    uid       String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String?
    image     String?
    Admin     Admin?

    Credentials  Credentials?
    AuthProvider AuthProvider?
    Student      Student[]
}

model Credentials {
    uid       String   @id
    user      User     @relation(fields: [uid], references: [uid])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email        String @unique
    passwordHash String
}

model AuthProvider {
    uid String @id

    type AuthProviderType
    user User             @relation(fields: [uid], references: [uid])
}

enum AuthProviderType {
    GOOGLE
    CREDENTIALS
}

model Admin {
    uid  String @id
    user User   @relation(fields: [uid], references: [uid])

    courses Course[]
}

model Student {
    uid   String @id
    user  User   @relation(fields: [uid], references: [uid])
    tests Test[]
}

model Course {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    description String?
    image       String?
    chapters    Chapter[]

    published Boolean? @default(false)

    admin    Admin  @relation(fields: [adminUid], references: [uid])
    adminUid String

    tests Test[]
}

model Chapter {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title     String
    content   String
    courseId  Int
    course    Course     @relation(fields: [courseId], references: [id])
    questions Question[]
}

model Question {
    id            Int            @id @default(autoincrement())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    question      String
    answer        Answer?
    chapterId     Int
    chapter       Chapter        @relation(fields: [chapterId], references: [id])
    testQuestions TestQuestion[]
}

model Answer {
    id          Int      @id @default(autoincrement())
    answer      String
    explanation String?
    questionId  Int      @unique
    question    Question @relation(fields: [questionId], references: [id])
}

model Test {
    id        Int            @id @default(autoincrement())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    courseId  Int
    course    Course         @relation(fields: [courseId], references: [id])
    questions TestQuestion[]

    aiTotalScore Int?
    Student      Student @relation(fields: [studentUid], references: [uid])
    studentUid   String
}

model TestQuestion {
    id            Int    @id @default(autoincrement())
    studentAnswer String

    aiScore    Int?
    aiFeedback String?

    testId     Int
    Test       Test     @relation(fields: [testId], references: [id])
    questionId Int
    question   Question @relation(fields: [questionId], references: [id])
}
